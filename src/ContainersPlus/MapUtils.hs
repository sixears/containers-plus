{- |

Description: utilities for working with Maps, with explicit (Monad)Errors
             when reading Lists with duplicate keys, etc.

-}

module ContainersPlus.MapUtils
  ( AsMapDupKeyError(..), MapDupKeyError( MapDupKeyError )
  , ToMapDupKeyError( toMapDupKeyError )
  , fromListWithDups, fromListDupsE, invertMap, invertMapS, mapFromList
  , mergeMaps, throwAsMapDupKeyError
  )
where

import Base1

-- base --------------------------------

import qualified  GHC.Exts  as  IsList

import Data.Foldable  ( Foldable, concat )
import Data.Functor   ( Functor )
import Data.Tuple     ( swap )

-- containers --------------------------

import qualified  Data.Map  as  Map
import Data.Map  ( Map, fromListWith, mapEither, null )

-- text-printer ------------------------

import qualified  Text.Printer  as  P

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified  NonEmptyContainers.NonEmptyHashSet  as  NonEmptyHashSet
import NonEmptyContainers.NonEmptyHashSet ( NonEmptyHashSet )

-------------------------------------------------------------------------------

-- I'd really like to make the type of the NonEmptyHashSet imply that it must
-- be of size 2 or more.  A job for another day.

{- | attempt was made to build a `Map` with one or more keys duplicated -}
data MapDupKeyError Œ∫ ŒΩ = MapDupKeyError (Map Œ∫ (NonEmptyHashSet ŒΩ)) CallStack
  deriving Show

instance (Typeable Œ∫, Typeable ŒΩ, Show Œ∫, Show ŒΩ) ‚áí
         Exception (MapDupKeyError Œ∫ ŒΩ)

instance (Eq Œ∫, Eq ŒΩ) ‚áí Eq (MapDupKeyError Œ∫ ŒΩ) where
  MapDupKeyError m _ == MapDupKeyError m' _ = m == m'

----------

instance (Printable Œ∫, Printable ŒΩ) ‚áí Printable (MapDupKeyError Œ∫ ŒΩ) where
  print (MapDupKeyError m _) =
    let xs ‚à∑ [ùïã]
        xs =  [ [fmt|'%T' ‚áí %T|] k v | (k,v) ‚Üê Map.toList m]
     in P.text $ [fmt|duplicate keys: {%L}|] xs

----------

instance HasCallstack (MapDupKeyError Œ∫ ŒΩ) where
  callstack = lens (\ (MapDupKeyError _ cs) ‚Üí cs)
                   (\ (MapDupKeyError m _) cs ‚Üí (MapDupKeyError m cs))

------------------------------------------------------------

{-| type that is convertable to a `MapDupKeyError` -}
class ToMapDupKeyError Œ∫ ŒΩ Œ± where
  {-| convert to `MapDupKeyError` -}
  toMapDupKeyError ‚à∑ HasCallStack ‚áí Œ± ‚Üí MapDupKeyError Œ∫ ŒΩ

--------------------

instance ToMapDupKeyError Œ∫ ŒΩ (MapDupKeyError Œ∫ ŒΩ) where
  toMapDupKeyError = id

--------------------

instance ToMapDupKeyError Œ∫ ŒΩ (Map Œ∫ (NonEmptyHashSet ŒΩ)) where
  toMapDupKeyError = \ xs ‚Üí MapDupKeyError xs callStack

--------------------

instance (Ord Œ∫, Hashable ŒΩ, Eq ŒΩ) ‚áí ToMapDupKeyError Œ∫ ŒΩ [(Œ∫,ŒΩ)] where
  toMapDupKeyError = toMapDupKeyError ‚àò mapFromList

------------------------------------------------------------

{-| prismatic type class for `MapDupKeyError` -}
class AsMapDupKeyError Œ∫ ŒΩ Œµ where
  {-| prism to `MapDupKeyError` -}
  _MapDupKeyError ‚à∑ Prism' Œµ (MapDupKeyError Œ∫ ŒΩ)

instance AsMapDupKeyError Œ∫ ŒΩ (MapDupKeyError Œ∫ ŒΩ) where
  _MapDupKeyError = id

----------------------------------------

{-| throw a `MapDupKeyError` as an `AsMapDupKeyError` -}
throwAsMapDupKeyError ‚à∑ (MonadError Œµ Œ∑, AsMapDupKeyError Œ∫ ŒΩ Œµ, HasCallStack) ‚áí
                        Map Œ∫ (NonEmptyHashSet ŒΩ) ‚Üí Œ∑ Œ±
throwAsMapDupKeyError m =
  throwError $ _MapDupKeyError # MapDupKeyError m callStack

------------------------------------------------------------

{-| convert a list of pairs to a map from keys to a set of values -}
mapFromList ‚à∑ (Ord Œ∫, Hashable ŒΩ, Eq ŒΩ, IsList l, Item l ~ (Œ∫,ŒΩ)) ‚áí
              l ‚Üí Map Œ∫ (NonEmptyHashSet ŒΩ)
mapFromList kvs =
  fromListWith (‚óá) (second NonEmptyHashSet.singleton ‚ä≥ IsList.toList kvs)

----------------------------------------

-- | Construct a map from a list of pairs, along with a list of keys with more
--   than one value (c.f., `Data.Map.fromList`, which discards duplicates).
--   The lists have disjoint keys - the 'normal' list contains only those keys
--   that don't have duplicate values.

fromListWithDups ‚à∑ (Ord Œ∫, Eq ŒΩ, Hashable ŒΩ, IsList l, Item l ~ (Œ∫,ŒΩ)) ‚áí
                    l ‚Üí (Map Œ∫ (NonEmptyHashSet ŒΩ), Map Œ∫ ŒΩ)
fromListWithDups ls =
  let map = fromListWith (‚óá) (second pure ‚ä≥ IsList.toList ls)
   in mapEither (\ case (v :| []) ‚Üí ùïΩ v; vs ‚Üí ùï∑ (NonEmptyHashSet.fromList vs))
                map

----------------------------------------

-- | like `fromListWithDups`, but instead of return both lists with & without
--   dups, this one returns the 'normal' list if there are no dups; else throws
--   the duplist

fromListDupsE ‚à∑ (Ord Œ∫, Eq ŒΩ, Hashable ŒΩ, IsList l, Item l ~ (Œ∫,ŒΩ),
                 AsMapDupKeyError Œ∫ ŒΩ Œµ, MonadError Œµ m, HasCallStack) ‚áí
                 l ‚Üí m (Map Œ∫ ŒΩ)
fromListDupsE ls =
  let (dups, res) = fromListWithDups ls
   in if null dups
      then return res
      else throwAsMapDupKeyError dups

----------------------------------------

-- | invert a map, that is, Map ŒΩ Œ∫ ‚Üí Map Œ∫ ŒΩ; throw an error if duplicate
--   Œ∫ values are found

invertMap ‚à∑ (Ord Œ∫, Eq ŒΩ, Hashable ŒΩ, IsList l, Item l ~ (ŒΩ,Œ∫),
             AsMapDupKeyError Œ∫ ŒΩ Œµ, MonadError Œµ m) ‚áí
            l ‚Üí m (Map Œ∫ ŒΩ)
invertMap m = fromListDupsE (swap ‚ä≥ IsList.toList m)

----------------------------------------

{- | invert a map which is a map to a list of values, that is,
     `Map ŒΩ [Œ∫] ‚Üí Map Œ∫ ŒΩ`; throw an error if duplicate Œ∫ values are found -}

invertMapS ‚à∑ (Ord Œ∫, Eq ŒΩ, Hashable ŒΩ, IsList l, Item l ~ (ŒΩ,[Œ∫]),
              AsMapDupKeyError Œ∫ ŒΩ Œµ, MonadError Œµ m) ‚áí
             l ‚Üí m (Map Œ∫ ŒΩ)
invertMapS m = fromListDupsE $ [ (v,k) | (k,vs) ‚Üê IsList.toList m, v ‚Üê vs ]

----------------------------------------

{- | merge a list of maps, throw if any key is duplicated -}
mergeMaps ‚à∑ ‚àÄ Œµ Œ∫ ŒΩ œÑ Œ∑ .
            (Ord Œ∫, Eq ŒΩ, Hashable ŒΩ, AsMapDupKeyError Œ∫ ŒΩ Œµ, MonadError Œµ Œ∑,
             Foldable œÑ, Functor œÑ) ‚áí
            œÑ (Map Œ∫ ŒΩ) ‚Üí Œ∑ (Map Œ∫ ŒΩ)
mergeMaps maps = fromListDupsE (concat $ IsList.toList ‚ä≥ maps)

-- that's all, folks! ---------------------------------------------------------
